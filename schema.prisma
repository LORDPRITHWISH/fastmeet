// database
datasource db {
  provider = "postgresql"
  url      = "postgresql://Interview_owner:APbWT87NYOXI@ep-wandering-bar-a5q672ov-pooler.us-east-2.aws.neon.tech/Interview?sslmode=require&connect_timeout=100"
}

// generator
generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

// Models

model Organization {
  id        Int         @id @default(autoincrement())
  name      String
  User      User[]
  Interview Interview[]
}

model passwars {
  id     Int    @id @default(autoincrement())
  user User   @relation(fields: [userId], references: [id])
  userId Int
  word   String
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  username       String        @unique
  name           String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
  Question       Question[]
  InterList      InterList[]
  passwars       passwars[]
  Answer         Answer[]
  Sesson         Sesson[]
}

model Interview {
  id             Int           @id @default(autoincrement())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
  Question       Question[]
  InterList      InterList[]
}

model Question {
  id       Int       @id @default(autoincrement())
  question String
  answer   String
  author   User      @relation(fields: [userId], references: [id])
  userId   Int
  group    Interview @relation(fields: [groupId], references: [id])
  groupId  Int
  Answer   Answer[]
}

model InterList {
  id      Int       @id @default(autoincrement())
  user    User?     @relation(fields: [userId], references: [id])
  userId  Int?
  group   Interview @relation(fields: [groupId], references: [id])
  groupId Int
  Answer  Answer[]
}

model Answer {
  id         Int       @id @default(autoincrement())
  ans        String?
  under      InterList @relation(fields: [underId], references: [id])
  underId    Int
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
}

model Sesson {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
